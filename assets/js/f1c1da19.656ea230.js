(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{75:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return s})),t.d(a,"metadata",(function(){return c})),t.d(a,"toc",(function(){return p})),t.d(a,"default",(function(){return l}));var n=t(3),r=t(7),i=(t(0),t(100)),s={id:"escape",title:"escape",sidebar_label:"escape",hide_title:!0},c={unversionedId:"api/escape",id:"api/escape",isDocsHomePage:!1,title:"escape",description:"escape",source:"@site/../docs/api/escape.mdx",slug:"/api/escape",permalink:"/regexp/api/escape",editUrl:"https://github.com/packula/regexp/edit/main/website/../docs/api/escape.mdx",version:"current",sidebar_label:"escape",sidebar:"docs"},p=[{value:"Parameters",id:"parameters",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Usage",id:"usage",children:[]}],o={toc:p};function l(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"escape"},Object(i.b)("inlineCode",{parentName:"h1"},"escape")),Object(i.b)("p",null,"A function that ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping"},"escapes")," a string for use in a ",Object(i.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"},"regular expression"),"."),Object(i.b)("p",null,"The returned string is suitable for use when building dynamic regular\nexpressions that should match the original string exactly."),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"The escaped string is suitable ",Object(i.b)("em",{parentName:"p"},"only")," for use in matching literal strings. In\nother words, it is ",Object(i.b)("em",{parentName:"p"},"not")," suitable for escaping characters inside regular\nexpression character classes."))),Object(i.b)("h2",{id:"parameters"},"Parameters"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"escape")," accepts a single string parameter."),Object(i.b)("h2",{id:"return-value"},"Return value"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"escape")," will return an escaped version of the original string."),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import {escape} from '@packula/regexp'\n\nconst happyFace = new RegExp(escape('^_^'))\n\nhappyFace.test('^_^') // returns true\nhappyFace.test('-_-') // returns false\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import {escape} from '@packula/regexp'\n\nfunction trimSuffix(suffix: string, value: string) {\n  return value.replace(new RegExp(`${escape(suffix)}$`, ''))\n}\n\ntrimSuffix('()', 'functionName()') // returns 'functionName'\n")))}l.isMDXComponent=!0}}]);